/*
 * Copyright (c) - Arcade Data LTD (https://arcadedata.com)
 */

/* Generated By:JJTree: Do not edit this line. OCommitStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.sql.parser;

import com.arcadedb.sql.executor.CommandContext;
import com.arcadedb.sql.executor.InternalResultSet;
import com.arcadedb.sql.executor.ResultInternal;
import com.arcadedb.sql.executor.ResultSet;

import java.util.Map;

public class CommitStatement extends SimpleExecStatement {

  protected PInteger retry;

  public CommitStatement(int id) {
    super(id);
  }

  public CommitStatement(SqlParser p, int id) {
    super(p, id);
  }

  @Override public ResultSet executeSimple(CommandContext ctx) {
    ctx.getDatabase().commit();
    InternalResultSet result = new InternalResultSet();
    ResultInternal item = new ResultInternal();
    item.setProperty("operation", "commit");
    result.add(item);
    return result;
  }

  @Override public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("COMMIT");
    if (retry != null) {
      builder.append(" RETRY ");
      retry.toString(params, builder);
    }
  }

  @Override public CommitStatement copy() {
    CommitStatement result = new CommitStatement(-1);
    result.retry = retry == null ? null : retry.copy();
    return result;
  }

  @Override public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    CommitStatement that = (CommitStatement) o;

    return retry != null ? retry.equals(that.retry) : that.retry == null;
  }

  @Override public int hashCode() {
    return retry != null ? retry.hashCode() : 0;
  }
}
/* JavaCC - OriginalChecksum=eaa0bc8f765fdaa017789953861bc0aa (do not edit this line) */
