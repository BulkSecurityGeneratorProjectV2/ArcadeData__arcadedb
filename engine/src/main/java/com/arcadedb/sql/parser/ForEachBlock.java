/*
 * Copyright (c) 2018 - Arcade Analytics LTD (https://arcadeanalytics.com)
 */

/* Generated By:JJTree: Do not edit this line. OForEachBlock.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.sql.parser;

import com.arcadedb.database.Database;
import com.arcadedb.sql.executor.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

//import com.orientechnologies.orient.core.sql.executor.LetExpressionStep;

public class ForEachBlock extends Statement {

  static int FOREACH_VARIABLE_PROGR = 0;

  protected Identifier loopVariable;
  protected Expression loopValues;
  protected List<Statement> statements = new ArrayList<>();

  public ForEachBlock(int id) {
    super(id);
  }

  public ForEachBlock(SqlParser p, int id) {
    super(p, id);
  }

  @Override public ResultSet execute(Database db, Object[] args, CommandContext parentCtx) {
    BasicCommandContext ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabase(db);
    Map<Object, Object> params = new HashMap<>();
    if (args != null) {
      for (int i = 0; i < args.length; i++) {
        params.put(i, args[i]);
      }
    }
    ctx.setInputParameters(params);
    UpdateExecutionPlan executionPlan = createExecutionPlan(ctx, false);
    executionPlan.executeInternal();
    return new LocalResultSet(executionPlan);
  }

  @Override public ResultSet execute(Database db, Map params, CommandContext parentCtx) {
    BasicCommandContext ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabase(db);
    ctx.setInputParameters(params);
    UpdateExecutionPlan executionPlan = createExecutionPlan(ctx, false);
    executionPlan.executeInternal();
    return new LocalResultSet(executionPlan);
  }

  public UpdateExecutionPlan createExecutionPlan(CommandContext ctx, boolean enableProfiling) {
    UpdateExecutionPlan plan = new UpdateExecutionPlan(ctx);
    int nextProg = ++FOREACH_VARIABLE_PROGR;
    if (FOREACH_VARIABLE_PROGR < 0) {
      FOREACH_VARIABLE_PROGR = 0;
    }
    Identifier varName = new Identifier("__ORIENTDB_FOREACH_VAR_" + nextProg);
    plan.chain(new LetExpressionStep(varName, loopValues, ctx, enableProfiling));
//    ForEachStep step = new ForEachStep(loopVariable, new OExpression(varName), ctx);//TODO
    return plan;
  }

  @Override public Statement copy() {
    ForEachBlock result = new ForEachBlock(-1);
    result.loopVariable = loopVariable.copy();
    result.loopValues = loopValues.copy();
    result.statements = statements.stream().map(x -> x.copy()).collect(Collectors.toList());
    return result;
  }

  @Override public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    ForEachBlock that = (ForEachBlock) o;

    if (loopVariable != null ? !loopVariable.equals(that.loopVariable) : that.loopVariable != null)
      return false;
    if (loopValues != null ? !loopValues.equals(that.loopValues) : that.loopValues != null)
      return false;
    return statements != null ? statements.equals(that.statements) : that.statements == null;

  }

  @Override public int hashCode() {
    int result = loopVariable != null ? loopVariable.hashCode() : 0;
    result = 31 * result + (loopValues != null ? loopValues.hashCode() : 0);
    result = 31 * result + (statements != null ? statements.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=071053b057a38c57f3c90d28399615d0 (do not edit this line) */
