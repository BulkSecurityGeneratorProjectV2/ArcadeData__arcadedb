/*
 * Copyright 2021 Arcade Data Ltd
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* Generated By:JJTree: Do not edit this line. OMoveVertexStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.sql.parser;

import com.arcadedb.database.Database;
import com.arcadedb.sql.executor.*;

import java.util.HashMap;
import java.util.Map;

public class MoveVertexStatement extends Statement {
  protected FromItem         source;
  protected Bucket           targetBucket;
  protected Identifier       targetType;
  protected UpdateOperations updateOperations;
  protected Batch            batch;

  public MoveVertexStatement(int id) {
    super(id);
  }

  public MoveVertexStatement(SqlParser p, int id) {
    super(p, id);
  }


  @Override public ResultSet execute(Database db, Object[] args, CommandContext parentCtx) {
    Map<Object, Object> params = new HashMap<>();
    if (args != null) {
      for (int i = 0; i < args.length; i++) {
        params.put(i, args[i]);
      }
    }
    return execute(db, params, parentCtx);
  }

  @Override public ResultSet execute(Database db, Map params, CommandContext parentCtx) {
    BasicCommandContext ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabase(db);
    ctx.setInputParameters(params);
    UpdateExecutionPlan executionPlan = createExecutionPlan(ctx, false);
    executionPlan.executeInternal();
    return new LocalResultSet(executionPlan);
  }

  public UpdateExecutionPlan createExecutionPlan(CommandContext ctx, boolean enableProfiling) {
    OMoveVertexExecutionPlanner planner = new OMoveVertexExecutionPlanner(this);
    return planner.createExecutionPlan(ctx, enableProfiling);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("MOVE VERTEX ");
    source.toString(params, builder);
    builder.append(" TO ");
    if (targetBucket != null) {
      targetBucket.toString(params, builder);
    } else {
      builder.append("TYPE:");
      targetType.toString(params, builder);
    }

    if (updateOperations != null) {
      builder.append(" ");
      updateOperations.toString(params, builder);
    }

    if (batch != null) {
      builder.append(" ");
      batch.toString(params, builder);
    }
  }

  @Override
  public MoveVertexStatement copy() {
    MoveVertexStatement result = new MoveVertexStatement(-1);
    result.source = source.copy();
    result.targetType = targetType == null ? null : targetType.copy();
    result.targetBucket = targetBucket == null ? null : targetBucket.copy();
    result.updateOperations = updateOperations == null ? null : updateOperations.copy();
    result.batch = batch == null ? null : batch.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    MoveVertexStatement that = (MoveVertexStatement) o;

    if (!source.equals(that.source))
      return false;
    if (targetBucket != null ? !targetBucket.equals(that.targetBucket) : that.targetBucket != null)
      return false;
    if (targetType != null ? !targetType.equals(that.targetType) : that.targetType != null)
      return false;
    if (updateOperations != null ? !updateOperations.equals(that.updateOperations) : that.updateOperations != null)
      return false;
    return batch != null ? batch.equals(that.batch) : that.batch == null;
  }

  @Override
  public int hashCode() {
    int result = source.hashCode();
    result = 31 * result + (targetBucket != null ? targetBucket.hashCode() : 0);
    result = 31 * result + (targetType != null ? targetType.hashCode() : 0);
    result = 31 * result + (updateOperations != null ? updateOperations.hashCode() : 0);
    result = 31 * result + (batch != null ? batch.hashCode() : 0);
    return result;
  }

  public FromItem getSource() {
    return source;
  }

  public void setSource(FromItem source) {
    this.source = source;
  }

  public Bucket getTargetBucket() {
    return targetBucket;
  }

  public void setTargetBucket(Bucket targetBucket) {
    this.targetBucket = targetBucket;
  }

  public Identifier getTargetType() {
    return targetType;
  }

  public void setTargetType(Identifier targetType) {
    this.targetType = targetType;
  }

  public UpdateOperations getUpdateOperations() {
    return updateOperations;
  }

  public void setUpdateOperations(UpdateOperations updateOperations) {
    this.updateOperations = updateOperations;
  }

  public Batch getBatch() {
    return batch;
  }

  public void setBatch(Batch batch) {
    this.batch = batch;
  }
}
/* JavaCC - OriginalChecksum=5cb0b9d3644fd28813ff615fe59d577d (do not edit this line) */
