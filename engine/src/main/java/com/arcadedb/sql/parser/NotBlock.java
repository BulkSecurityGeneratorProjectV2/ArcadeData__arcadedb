/*
 * Copyright (c) 2018 - Arcade Analytics LTD (https://arcadeanalytics.com)
 */

/* Generated By:JJTree: Do not edit this line. ONotBlock.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.arcadedb.sql.parser;

import com.arcadedb.database.Database;
import com.arcadedb.database.Identifiable;
import com.arcadedb.schema.PDocumentType;
import com.arcadedb.sql.executor.CommandContext;
import com.arcadedb.sql.executor.Result;

import java.util.List;
import java.util.Map;
import java.util.Set;

public class NotBlock extends BooleanExpression {
  protected BooleanExpression sub;

  protected boolean negate = false;

  public NotBlock(int id) {
    super(id);
  }

  public NotBlock(SqlParser p, int id) {
    super(p, id);
  }

  @Override
  public boolean evaluate(Identifiable currentRecord, CommandContext ctx) {
    if (sub == null) {
      return true;
    }
    boolean result = sub.evaluate(currentRecord, ctx);
    if (negate) {
      return !result;
    }
    return result;
  }

  @Override
  public boolean evaluate(Result currentRecord, CommandContext ctx) {
    if (sub == null) {
      return true;
    }
    boolean result = sub.evaluate(currentRecord, ctx);
    if (negate) {
      return !result;
    }
    return result;
  }

  public BooleanExpression getSub() {
    return sub;
  }

  public void setSub(BooleanExpression sub) {
    this.sub = sub;
  }

  public boolean isNegate() {
    return negate;
  }

  public void setNegate(boolean negate) {
    this.negate = negate;
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (negate) {
      builder.append("NOT ");
    }
    sub.toString(params, builder);
  }

  @Override
  public boolean supportsBasicCalculation() {
    return true;
  }

  @Override
  protected int getNumberOfExternalCalculations() {
    return sub.getNumberOfExternalCalculations();
  }

  @Override
  protected List<Object> getExternalCalculationConditions() {
    return sub.getExternalCalculationConditions();
  }

  public List<BinaryCondition> getIndexedFunctionConditions(PDocumentType iSchemaClass, Database database) {
    if (sub == null) {
      return null;
    }
    if (negate) {
      return null;
    }
    return sub.getIndexedFunctionConditions(iSchemaClass, database);
  }

  @Override
  public List<AndBlock> flatten() {
    if (!negate) {
      return sub.flatten();
    }
    return super.flatten();
  }

  @Override
  public boolean needsAliases(Set<String> aliases) {
    return sub.needsAliases(aliases);
  }

  @Override
  public NotBlock copy() {
    NotBlock result = new NotBlock(-1);
    result.sub = sub.copy();
    result.negate = negate;
    return result;
  }

  @Override
  public void extractSubQueries(SubQueryCollector collector) {
    sub.extractSubQueries(collector);
  }

  @Override
  public boolean refersToParent() {
    return sub.refersToParent();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    NotBlock oNotBlock = (NotBlock) o;

    if (negate != oNotBlock.negate)
      return false;
    if (sub != null ? !sub.equals(oNotBlock.sub) : oNotBlock.sub != null)
      return false;

    return true;
  }

  @Override
  public int hashCode() {
    int result = sub != null ? sub.hashCode() : 0;
    result = 31 * result + (negate ? 1 : 0);
    return result;
  }

  @Override
  public List<String> getMatchPatternInvolvedAliases() {
    return sub.getMatchPatternInvolvedAliases();
  }

  @Override
  public void translateLuceneOperator() {
    sub.translateLuceneOperator();
  }

  @Override
  public boolean isCacheable() {
    return sub.isCacheable();
  }
}
/* JavaCC - OriginalChecksum=1926313b3f854235aaa20811c22d583b (do not edit this line) */
