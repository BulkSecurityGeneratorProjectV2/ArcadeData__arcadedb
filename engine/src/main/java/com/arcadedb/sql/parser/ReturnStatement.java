/* Generated By:JJTree: Do not edit this line. OReturnStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.arcadedb.sql.parser;

import com.arcadedb.database.Document;
import com.arcadedb.sql.executor.*;

import java.util.Map;

public class ReturnStatement extends SimpleExecStatement {
  protected Expression expression;

  public ReturnStatement(int id) {
    super(id);
  }

  public ReturnStatement(SqlParser p, int id) {
    super(p, id);
  }

  @Override
  public ResultSet executeSimple(CommandContext ctx) {
    InternalResultSet rs = new InternalResultSet();
    Object result = expression.execute((Result) null, ctx);
    if (result instanceof Result) {
      rs.add((Result) result);
    } else if (result instanceof Document) {
      ResultInternal res = new ResultInternal();
      res.setElement((Document) result);
      rs.add(res);
    } else if (result instanceof ResultSet) {
      if (!((ResultSet) result).hasNext()) {
        try {
          ((ResultSet) result).reset();
        } catch (UnsupportedOperationException ignore) {
          // just try to reset the RS, in case it was already used during the script execution already
          // You can have two cases here:
          // - a result stored in a LET, that is always resettable, as it's copied
          // - a result from a direct query (eg. RETURN SELECT...), that is new or just empty, so this operation does not hurt
        }
      }
      return (ResultSet) result;
    } else {
      ResultInternal res = new ResultInternal();
      res.setProperty("value", result);
      rs.add(res);
    }
    return rs;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("RETURN");
    if (expression != null) {
      builder.append(" ");
      expression.toString(params, builder);
    }
  }

  @Override
  public ReturnStatement copy() {
    ReturnStatement result = new ReturnStatement(-1);
    result.expression = expression == null ? null : expression.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    ReturnStatement that = (ReturnStatement) o;

    if (expression != null ? !expression.equals(that.expression) : that.expression != null)
      return false;

    return true;
  }

  @Override
  public int hashCode() {
    return expression != null ? expression.hashCode() : 0;
  }
}
/* JavaCC - OriginalChecksum=c72ec860d1fa92cbf52e42ae1c2935c0 (do not edit this line) */
