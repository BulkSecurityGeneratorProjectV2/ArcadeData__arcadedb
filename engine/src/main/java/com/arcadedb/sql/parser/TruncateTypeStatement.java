/*
 * Copyright (c) - Arcade Data LTD (https://arcadedata.com)
 */

/* Generated By:JJTree: Do not edit this line. OTruncateClassStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.sql.parser;

import com.arcadedb.database.Database;
import com.arcadedb.sql.executor.CommandContext;
import com.arcadedb.sql.executor.ResultSet;

import java.util.Map;

public class TruncateTypeStatement extends ODDLStatement {

  protected Identifier typeName;
  protected boolean    polymorphic = false;
  protected boolean    unsafe      = false;

  public TruncateTypeStatement(int id) {
    super(id);
  }

  public TruncateTypeStatement(SqlParser p, int id) {
    super(p, id);
  }

  @Override public ResultSet executeDDL(CommandContext ctx) {
    Database db = ctx.getDatabase();
//    OSchema schema = db.getMetadata().getSchema();
//    OClass typez = schema.getClass(className.getStringValue());
//    if (typez == null) {
//      throw new PCommandExecutionException("Schema Class not found: " + className);
//    }
//
//    final long recs = typez.count(polymorphic);
//    if (recs > 0 && !unsafe) {
//      if (typez.isSubClassOf("V")) {
//        throw new PCommandExecutionException(
//            "'TRUNCATE USERTYPE' command cannot be used on not empty vertex classes. Apply the 'UNSAFE' keyword to force it (at your own risk)");
//      } else if (typez.isSubClassOf("E")) {
//        throw new PCommandExecutionException(
//            "'TRUNCATE USERTYPE' command cannot be used on not empty edge classes. Apply the 'UNSAFE' keyword to force it (at your own risk)");
//      }
//    }
//
//
//    OInternalResultSet rs = new OInternalResultSet();
//    Collection<OClass> subTypes = typez.getAllSubclasses();
//    if (polymorphic && !unsafe) {// for multiple inheritance
//      for (OClass subType : subTypes) {
//        long subTypeRecs = typez.count();
//        if (subTypeRecs > 0) {
//          if (subType.isSubClassOf("V")) {
//            throw new PCommandExecutionException(
//                "'TRUNCATE USERTYPE' command cannot be used on not empty vertex classes (" + subType.getName()
//                    + "). Apply the 'UNSAFE' keyword to force it (at your own risk)");
//          } else if (subType.isSubClassOf("E")) {
//            throw new PCommandExecutionException(
//                "'TRUNCATE USERTYPE' command cannot be used on not empty edge classes (" + subType.getName()
//                    + "). Apply the 'UNSAFE' keyword to force it (at your own risk)");
//          }
//        }
//      }
//    }
//
//    try {
//      typez.truncate();
//      OResultInternal result = new OResultInternal();
//      result.setProperty("operation", "truncate class");
//      result.setProperty("className", className.getStringValue());
//      rs.add(result);
//      invalidateCommandCache(typez, db);
//      if (polymorphic) {
//        for (OClass subType : subTypes) {
//          subType.truncate();
//          result = new OResultInternal();
//          result.setProperty("operation", "truncate class");
//          result.setProperty("className", className.getStringValue());
//          rs.add(result);
//          invalidateCommandCache(subType, db);
//        }
//      }
//    } catch (IOException e) {
//      throw OException.wrapException(new PCommandExecutionException("Error on executing command"), e);
//    }
//
//
//    return rs;

    throw new UnsupportedOperationException();
  }

//  private void invalidateCommandCache(OClass typez, ODatabase db) {
//    if (typez == null) {
//      return;
//    }
//    OCommandCache commandCache = ((OMetadataInternal)db.getMetadata()).getCommandCache();
//    if (commandCache != null && commandCache.isEnabled()) {
//      int[] bucketIds = typez.getClusterIds();
//      if (bucketIds != null) {
//        for (int i : bucketIds) {
//          String bucketName = getDatabase().getClusterNameById(i);
//          if (bucketName != null) {
//            commandCache.invalidateResultsOfCluster(bucketName);
//          }
//        }
//      }
//    }
//  }

  /**
   * Accept the visitor.
   **/
  public Object jjtAccept(SqlParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  @Override public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("TRUNCATE TYPE " + typeName.toString());
    if (polymorphic) {
      builder.append(" POLYMORPHIC");
    }
    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  @Override public TruncateTypeStatement copy() {
    TruncateTypeStatement result = new TruncateTypeStatement(-1);
    result.typeName = typeName == null ? null : typeName.copy();
    result.polymorphic = polymorphic;
    result.unsafe = unsafe;
    return result;
  }

  @Override public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    TruncateTypeStatement that = (TruncateTypeStatement) o;

    if (polymorphic != that.polymorphic)
      return false;
    if (unsafe != that.unsafe)
      return false;
    return typeName != null ? typeName.equals(that.typeName) : that.typeName == null;
  }

  @Override public int hashCode() {
    int result = typeName != null ? typeName.hashCode() : 0;
    result = 31 * result + (polymorphic ? 1 : 0);
    result = 31 * result + (unsafe ? 1 : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=301f993f6ba2893cb30c8f189674b974 (do not edit this line) */
