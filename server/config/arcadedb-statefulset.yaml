#
# Overall Design:
#    - a headless service to expose a DNS entry for discovery
#    - a service to expose end-points to the outside world
#    - the stateful set itself
#    - a load-balancer service to view the universe dashboard UI
#
# Using ArcadeDB with k8s
#    - Create cluster    : kubectl apply -f arcadedb-statefulset.yaml
#    - List the pods     : kubectl get pods
#    - Run console       : kubectl exec -it arcadedb-0 /home/arcadedb/bin/console.sh
#    - Destroy cluster   : kubectl delete -f arcadedb-statefulset.yaml

apiVersion: v1
kind: Service
metadata:
  # This is a "headless" service for the arcadedb which exists to allow discovery of the set of
  # member pods (masters). The CNAME of this service points to SRV records - one for each Pod that
  # is Running and Ready). Read more in the Kubernetes docs:
  # https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/
  name: arcadedb-masters
  labels:
    app: arcadedb-master
spec:
  clusterIP: None
  ports:
  - name: http
    port: 2480
  - name: rpc-port
    port: 2424
  selector:
    app: arcadedb-master
---
apiVersion: v1
kind: Service
metadata:
  name: arcadedb-master-http
  labels:
    app: arcadedb-master
spec:
  clusterIP:
  ports:
  - name: http
    port: 2480
  selector:
    app: arcadedb-master
  type: LoadBalancer
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: arcadedb-master
  labels:
    app: arcadedb-master
spec:
  serviceName: arcadedb-masters
  podManagementPolicy: "Parallel"
  replicas: 1
  selector:
    matchLabels:
      app: arcadedb-master
  template:
    metadata:
      labels:
        app: arcadedb-master
    spec:
      affinity:
        # Set the anti-affinity selector scope to arcadedb servers.
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - arcadedb-master
              topologyKey: kubernetes.io/hostname
      containers:
      - name: arcadedb-master
        image: arcade-analytics/arcadedb:latest
        imagePullPolicy: Always
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        command:
          - "/home/arcadedb/bin/server.sh"
          - "--fs_data_dirs=/mnt/data0"
          - "--rpc_bind_addresses=$(POD_IP)"
          - "--master_addresses=yb-masters.default.svc.cluster.local:7100"
          - "--master_replication_factor=3"
        ports:
        - containerPort: 2480
          name: server-http
        - containerPort: 2424
          name: server-rpc
#        readinessProbe:
#          tcpSocket:
#            port: 7100
#          initialDelaySeconds: 5
#          periodSeconds: 10
#        livenessProbe:
#          tcpSocket:
#            port: 7100
#          initialDelaySeconds: 15
#          periodSeconds: 10

        # These volume mounts are persistent. They are like inline claims,
        # but not exactly because the names need to match exactly one of
        # the stateful pod volumes.
        volumeMounts:
        - name: datadir
          mountPath: /mnt/data0
  updateStrategy:
    type: RollingUpdate
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  # do not use these in production until ssd GCEPersistentDisk or other ssd pd
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  # This is a "headless" service for the arcadedb-replica which exists to allow discovery of the set of
  # member pods (replicas).
  name: arcadedb-replicas
  labels:
    app: arcadedb-replica
spec:
  clusterIP: None
  ports:
  - name: http
    port: 2480
  - name: rpc-port
    port: 2423
  selector:
    app: arcadedb-replica
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: arcadedb-replica
  labels:
    app: arcadedb-replica
spec:
  serviceName: arcadedb-replicas
  podManagementPolicy: "Parallel"
  replicas: 3
  selector:
    matchLabels:
      app: arcadedb-replica
  template:
    metadata:
      labels:
        app: arcadedb-replica
    spec:
      affinity:
        # Set the anti-affinity selector scope to ArcadeDB replica here.
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - arcadedb-replica
              topologyKey: kubernetes.io/hostname
      containers:
      - name: arcadedb-replica
        image: arcade-analytics/arcadedb:latest
        imagePullPolicy: Always
        command:
          - "/home/arcadedb/bin/server.sh"
          - "--fs_data_dirs=/mnt/data0"
          - "--tserver_master_addrs=yb-masters.default.svc.cluster.local:7100"
          - "--tserver_master_replication_factor=3"
        ports:
        - containerPort: 2480
          name: replica-http
        - containerPort: 2424
          name: replica-rpc
        # These volume mounts are persistent. They are like inline claims,
        # but not exactly because the names need to match exactly one of
        # the stateful pod volumes.
        volumeMounts:
        - name: datadir
          mountPath: /mnt/data0
  updateStrategy:
    type: RollingUpdate
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  # do not use these in production until ssd GCEPersistentDisk or other ssd pd
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi