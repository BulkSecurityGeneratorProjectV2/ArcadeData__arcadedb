/* Generated By:JJTree: Do not edit this line. OCreateClassStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.arcadedb.sql.parser;

import com.arcadedb.exception.PCommandExecutionException;
import com.arcadedb.schema.PSchema;
import com.arcadedb.sql.executor.OCommandContext;
import com.arcadedb.sql.executor.OInternalResultSet;
import com.arcadedb.sql.executor.OResultSet;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class CreateClassStatement extends ODDLStatement {
  /**
   * Class name
   */
  public Identifier name;

  public boolean ifNotExists;

  /**
   * Direct superclasses for this class
   */
  protected List<Identifier> superclasses;

  /**
   * Cluster IDs for this class
   */
  protected List<Integer> clusters;

  /**
   * Total number clusters for this class
   */
  protected Integer totalClusterNo;

  protected boolean abstractClass = false;

  public CreateClassStatement(int id) {
    super(id);
  }

  public CreateClassStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override public OResultSet executeDDL(OCommandContext ctx) {

    PSchema schema = ctx.getDatabase().getSchema();
    if (schema.getType(name.getStringValue())!=null) {
      if(ifNotExists){
        return new OInternalResultSet();
      }else {
        throw new PCommandExecutionException("Class " + name + " already exists");
      }
    }
//    checkSuperclasses(schema, ctx);
//
//    OResultInternal result = new OResultInternal();
//    result.setProperty("operation", "create class");
//    result.setProperty("className", name.getStringValue());
//
//    OClass clazz = null;
//    OClass[] superclasses = getSuperClasses(schema);
//    if (abstractClass) {
//      clazz = schema.createAbstractClass(name.getStringValue(), superclasses);
//      result.setProperty("abstract", abstractClass);
//    } else if (totalClusterNo != null) {
//      clazz = schema.createClass(name.getStringValue(), totalClusterNo.getValue().intValue(), superclasses);
//    } else if (clusters != null) {
//      clusters.stream().map(x -> x.getValue().intValue()).collect(Collectors.toList());
//      int[] clusterIds = new int[clusters.size()];
//      for (int i = 0; i < clusters.size(); i++) {
//        clusterIds[i] = clusters.get(i).getValue().intValue();
//      }
//      clazz = schema.createClass(name.getStringValue(), clusterIds, superclasses);
//    } else {
//      clazz = schema.createClass(name.getStringValue(), superclasses);
//    }
//
//    OInternalResultSet rs = new OInternalResultSet();
//    rs.add(result);
//    return rs;
    throw new UnsupportedOperationException();
  }

//  private OClass[] getSuperClasses(OSchema schema) {
//    if(superclasses==null){
//      return new OClass[]{};
//    }
//    return superclasses.stream().map(x -> schema.getClass(x.getStringValue())).filter(x -> x != null).collect(Collectors.toList())
//        .toArray(new OClass[] {});
//  }
//
//
//  private void checkSuperclasses(OSchema schema, OCommandContext ctx) {
//    if (superclasses != null) {
//      for (OIdentifier superclass : superclasses) {
//        if (!schema.existsClass(superclass.getStringValue())) {
//          throw new PCommandExecutionException("Superclass " + superclass + " not found");
//        }
//      }
//    }
//  }

  @Override public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE CLASS ");
    name.toString(params, builder);
    if(ifNotExists){
      builder.append(" IF NOT EXISTS");
    }
    if (superclasses != null && superclasses.size() > 0) {
      builder.append(" EXTENDS ");
      boolean first = true;
      for (Identifier sup : superclasses) {
        if (!first) {
          builder.append(", ");
        }
        sup.toString(params, builder);
        first = false;
      }
    }
    if (clusters != null && clusters.size() > 0) {
      builder.append(" CLUSTER ");
      boolean first = true;
      for (Integer cluster : clusters) {
        if (!first) {
          builder.append(",");
        }
        cluster.toString(params, builder);
        first = false;
      }
    }
    if (totalClusterNo != null) {
      builder.append(" CLUSTERS ");
      totalClusterNo.toString(params, builder);
    }
    if (abstractClass) {
      builder.append(" ABSTRACT");
    }
  }

  @Override public CreateClassStatement copy() {
    CreateClassStatement result = new CreateClassStatement(-1);
    result.name = name == null ? null : name.copy();
    result.superclasses = superclasses == null ? null : superclasses.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.clusters = clusters == null ? null : clusters.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.totalClusterNo = totalClusterNo == null ? null : totalClusterNo.copy();
    result.abstractClass = abstractClass;
    result.ifNotExists = ifNotExists;
    return result;
  }

  @Override public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    CreateClassStatement that = (CreateClassStatement) o;

    if (abstractClass != that.abstractClass)
      return false;
    if (name != null ? !name.equals(that.name) : that.name != null)
      return false;
    if (superclasses != null ? !superclasses.equals(that.superclasses) : that.superclasses != null)
      return false;
    if (clusters != null ? !clusters.equals(that.clusters) : that.clusters != null)
      return false;
    if (totalClusterNo != null ? !totalClusterNo.equals(that.totalClusterNo) : that.totalClusterNo != null)
      return false;
    if(ifNotExists!=that.ifNotExists){
      return false;
    }

    return true;
  }

  @Override public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (superclasses != null ? superclasses.hashCode() : 0);
    result = 31 * result + (clusters != null ? clusters.hashCode() : 0);
    result = 31 * result + (totalClusterNo != null ? totalClusterNo.hashCode() : 0);
    result = 31 * result + (abstractClass ? 1 : 0);
    return result;
  }
  public List<Identifier> getSuperclasses() {
    return superclasses;
  }
}
/* JavaCC - OriginalChecksum=4043013624f55fdf0ea8fee6d4f211b0 (do not edit this line) */
